/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import io.github.pixee.security.ObjectInputFilters;
import java.io.BufferedWriter;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import model.UberModel;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author meghanshubhatt
 */
public class ViewUber extends javax.swing.JPanel {

    /**
     * Creates new form ViewUber
     */
    
    
    UberModel car;
    ArrayList<UberModel> ls;
    
    //ArrayList<UberModel> carinfo = new ArrayList<>();
    public ViewUber(UberModel car){
        initComponents();
        this.car=car;
        ls = new ArrayList<UberModel>();
        ReadFile();
        populateTable();
        
//        String [] lsarray = new String[ls.size()];
//        for (int i=0; i<ls.size(); i++)
//        {
//            System.out.println(ls.get(i).getBrand());
//        }
        
        
   
    }
    
    public void populateTable(){
          //JTable  table = new JTable();
          //DefaultTableModel model = new DefaultTableModel();
          DefaultTableModel model = (DefaultTableModel) jTableViewCar.getModel();
          model.setRowCount(0);
          Object rowData[] = new Object[13];
        for (int i = 0; i < ls.size(); i++) {
            rowData[0] = ls.get(i).getBrand();
            rowData[1] = ls.get(i).getModel();
            rowData[2] = ls.get(i).getYear();
            rowData[3] = ls.get(i).getSeatsNumber();
            rowData[4] = ls.get(i).getLicensePlates();
            rowData[5] = ls.get(i).getWarrantyYear();
            rowData[6] = ls.get(i).getOwnerName();
            rowData[7] = ls.get(i).getOwnerTelephoneNumbers();
            rowData[8] = ls.get(i).getOwnerDriverLicense();
            rowData[9] = ls.get(i).getisAvailable();
            rowData[10] = ls.get(i).getisMaintenanceCertificates();
            rowData[11] = ls.get(i).getisCity();
            rowData[12] = ls.get(i).getisSerialNumber();
            model.addRow(rowData);
            //System.out.println(rowData);
        
        }
        
    }
    
    public void ReadFile(){
    
            try{
            FileInputStream file = new FileInputStream("ubercars.dat");
            ObjectInputStream input = new ObjectInputStream(file);
            ObjectInputFilters.enableObjectFilterIfUnprotected(input);
            boolean endoffile = false;
            
            while (!endoffile){
                try
                {
                    ls.add((UberModel) input.readObject());
                    
                }
                catch(EOFException e)
                {
                   endoffile = true;
                }
                catch(Exception f)
                {
                    JOptionPane.showMessageDialog(null, f.getMessage());
                }
            }
            input.close();
        
        }
        catch (IOException e)
                {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
    }
    

       /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableViewCar = new javax.swing.JTable();
        txtCity = new javax.swing.JTextField();
        lblOwnerTelephoneNumber = new javax.swing.JLabel();
        txtPhoneNumber = new javax.swing.JTextField();
        lblBrand = new javax.swing.JLabel();
        btnViewRecord = new javax.swing.JButton();
        btnUpdateRecord = new javax.swing.JButton();
        lblCarAvailable1 = new javax.swing.JLabel();
        lblCarAvailable = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        checkBoxCA = new javax.swing.JCheckBox();
        checkBoxMC = new javax.swing.JCheckBox();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/CarImage.png"))); // NOI18N

        jTableViewCar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTableViewCar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Brand", "Model", "Year", "Seat's", "License Plate", "Warranty Year", "Driver Name", "Phone No.", "Driving License", "Car Avail", "Car Maintaience", "City", "Serial Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Long.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableViewCar);

        txtCity.setBackground(new java.awt.Color(204, 204, 204));
        txtCity.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtCity.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        lblOwnerTelephoneNumber.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblOwnerTelephoneNumber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblOwnerTelephoneNumber.setText("City:");

        txtPhoneNumber.setBackground(new java.awt.Color(204, 204, 204));
        txtPhoneNumber.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtPhoneNumber.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        lblBrand.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblBrand.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBrand.setText("Phone Number:");

        btnViewRecord.setText("View");
        btnViewRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewRecordActionPerformed(evt);
            }
        });

        btnUpdateRecord.setText("Update");
        btnUpdateRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateRecordActionPerformed(evt);
            }
        });

        lblCarAvailable1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblCarAvailable1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCarAvailable1.setText("Expired Maintenance Certificate:");

        lblCarAvailable.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblCarAvailable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCarAvailable.setText("Car Available:");

        lblName.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblName.setText("Please View or Update the Profile !");

        checkBoxCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxCAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1))
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnViewRecord)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBrand)
                            .addComponent(lblOwnerTelephoneNumber))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCarAvailable)
                            .addComponent(lblCarAvailable1))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxMC)
                            .addComponent(checkBoxCA)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(btnUpdateRecord)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewRecord)
                    .addComponent(btnUpdateRecord))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCarAvailable)
                            .addComponent(checkBoxCA))
                        .addGap(25, 25, 25)
                        .addComponent(checkBoxMC))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblCarAvailable1)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(lblBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(lblOwnerTelephoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(38, 38, 38))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewRecordActionPerformed
        // TODO add your handling code here:
        
        int selecteRowIndex = jTableViewCar.getSelectedRow();
        
        if (selecteRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select the record");
            return; 
        }
        //System.out.println(ls.get(selecteRowIndex));
        //DefaultTableModel model = (DefaultTableModel) jTableViewCar.getModel();
        
//        UberModel selectedcar = (UberModel) model.getValueAt(selecteRowIndex,));
//        
        txtCity.setText(ls.get(selecteRowIndex).getisCity());
        txtPhoneNumber.setText(String.valueOf(ls.get(selecteRowIndex).getOwnerTelephoneNumbers()));
        
        if (ls.get(selecteRowIndex).getisAvailable())
        {
            
            checkBoxCA.doClick();
            
        }

        
        if (ls.get(selecteRowIndex).getisMaintenanceCertificates())
        {
            checkBoxMC.doClick();
            
        }

        
        
        
        
    }//GEN-LAST:event_btnViewRecordActionPerformed

    
    public void saveFile()
    {
        try
        {
            FileOutputStream fis = new FileOutputStream("ubercars.dat");
            ObjectOutputStream oos = new ObjectOutputStream(fis);
            
            for (int i = 0; i < ls.size(); i++)
            {
                oos.writeObject(ls.get(i));
                //System.out.println(ls.get(i).getBrand());
                
            }
//            oos.writeObject(ls.get(0));
//            System.out.println(ls.get(0).getBrand());
//
//            oos.close();
            
        }
        catch(IOException e)
                {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
        
        
    }
    private void btnUpdateRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateRecordActionPerformed
        
        DefaultTableModel model = (DefaultTableModel) jTableViewCar.getModel();
        int selecteRowIndex = jTableViewCar.getSelectedRow();
        
        if (selecteRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select the record");
            return; 
        }
        
        
        
            try{
            long phoneNumber = Long.parseLong(txtPhoneNumber.getText());

            if (String.valueOf(phoneNumber).length() != 10)
            {
                JOptionPane.showMessageDialog(this, "Input Valid Telephone Number !");
                txtPhoneNumber.grabFocus();
                return;

            }
            
        
        for (int i = 0; i < ls.size(); i++)
        {
            long pattern = ls.get(i).getOwnerTelephoneNumbers();
               if(phoneNumber == pattern && selecteRowIndex != i)
               {
                   JOptionPane.showMessageDialog(this, "This Phone Number is Already registered !");
                   return;
               }
               
     
        }

            ls.get(selecteRowIndex).setOwnerTelephoneNumbers(Long.parseLong(txtPhoneNumber.getText()));
        }
        catch(NumberFormatException e)
        {JOptionPane.showMessageDialog(this, "Input Valid Telephone Number !");
            txtPhoneNumber.grabFocus();
            return;
        }
          
          
          
          
          
          
          
          
          
          
          
        // CITY
        if (txtCity.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(this, "City is Empty!");
            txtCity.grabFocus();
            return;
        }
        else
        {ls.get(selecteRowIndex).setisCity(txtCity.getText());}
          
          
          
        

        
          
        if (checkBoxCA.isSelected())
        {
            ls.get(selecteRowIndex).setisAvailable(true);
        }
        else
        {
            ls.get(selecteRowIndex).setisAvailable(false);
        }
        
        if (checkBoxMC.isSelected())
        {
            ls.get(selecteRowIndex).setisMaintenanceCertificates(true);
        }
        else{
            ls.get(selecteRowIndex).setisMaintenanceCertificates(false);
        }
           
        saveFile();
        populateTable();
        
        
        //// AFTER ALL THE VALIDATION
        try {
            SaveDateTime();
        } catch (IOException ex) {
            Logger.getLogger(ViewUber.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(this, "Car Information Saved !");
        
        
        
    }//GEN-LAST:event_btnUpdateRecordActionPerformed

    private void checkBoxCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxCAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxCAActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUpdateRecord;
    private javax.swing.JButton btnViewRecord;
    private javax.swing.JCheckBox checkBoxCA;
    private javax.swing.JCheckBox checkBoxMC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableViewCar;
    private javax.swing.JLabel lblBrand;
    private javax.swing.JLabel lblCarAvailable;
    private javax.swing.JLabel lblCarAvailable1;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblOwnerTelephoneNumber;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtPhoneNumber;
    // End of variables declaration//GEN-END:variables

    private void SaveDateTime() throws IOException {
    DateFormat dateFormat = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
    Date today = Calendar.getInstance().getTime();
    String logDate = dateFormat.format(today);
    System.out.println(logDate);
    BufferedWriter logWriter = new BufferedWriter (new FileWriter("serverLog.txt"));
    logWriter.write(logDate);
    logWriter.close();
    }
}






